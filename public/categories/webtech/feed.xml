<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Webtech on Gundersen.net</title>
    <link>http://localhost:1313/categories/webtech/</link>
    <description>Recent content in Webtech on Gundersen.net</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 30 Jan 2021 23:38:49 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/webtech/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>.Net&#39;s defective-by-default browser capabilities detection lends itself to DoS</title>
      <link>http://localhost:1313/nets-defective-cached-browser-capabilities-detection-dos-attack/</link>
      <pubDate>Sat, 30 Jan 2021 23:38:49 +0000</pubDate>
       <guid isPermaLink="false">https://gundersen.net/?p=512</guid> 
      <description>&lt;p&gt;Ever since .Net v4, in all versions including the last classic .Net version v4.8, the built-in browser detection accessible in the Request.Browser (a HttpBrowserCapabilities object) has a serious flaw which will bite you as soon as your site gets several visitors per minute.&lt;/p&gt;
&lt;p&gt;What happens, if you rely on this object, is that users will randomly report having their browser mis-identified.&lt;/p&gt;
&lt;p&gt;This post shows why it happens and how to solve it. The issue is also easy to reproduce locally, worth a few fun minutes. If you are so inclined, the problem also lends itself to a DoS attack.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solved: Azure Function &#34;Publish Failed&#34; from Visual Studio 2017</title>
      <link>http://localhost:1313/solved-azure-function-publish-failed-from-visual-studio-2017/</link>
      <pubDate>Wed, 25 Mar 2020 11:23:05 +0000</pubDate>
       <guid isPermaLink="false">https://gundersen.net/?p=475</guid> 
      <description>&lt;p&gt;The &amp;ldquo;Publishing failed&amp;rdquo; error message will make you feel cursed. It appears when publishing an Azure serverless Function directly from Visual Studio 2017. Some never see it, but those who do can&amp;rsquo;t seem to get rid of it.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/wp-content/uploads/2020/03/publishfailed%5F450px.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;I tried all the recommended internet forum voodoo of creating new deployment profiles, restarting Visual Studio, cleaning the project and downloading deployment profiles. If it did go away for once, it always came back.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSL Host Header with wildcard certificate on IIS7 solved</title>
      <link>http://localhost:1313/ssl-host-header-with-wildcard-certificate-on-iis7-explained/</link>
      <pubDate>Mon, 02 Mar 2015 13:49:05 +0000</pubDate>
       <guid isPermaLink="false">https://gundersen.net/?p=363</guid> 
      <description>&lt;p&gt;When adding a HTTPS site on IIS7, the Host header field is disabled. If you have one IP per site, as used to be the requirement, this is not a problem. But when you want to host multiple sites on one IP, it is a show stopper.&lt;/p&gt;
&lt;p&gt;In my case I had a wildcard certificate, and ran into this when adding my second site. It was important not to cause any down-time on the already running site.&lt;/p&gt;</description>
    </item>
    <item>
      <title>American Netflix on any device without VPN or site-wide DNS changes - using pfSsense</title>
      <link>http://localhost:1313/american-netflix-on-ipad-and-chromecast-without-vpn-using-pfsense/</link>
      <pubDate>Mon, 14 Apr 2014 13:04:16 +0000</pubDate>
       <guid isPermaLink="false">http://www.gundersen.net/?p=256</guid> 
      <description>&lt;p&gt;It seems like everyone is finding ways to watch American Netflix content. While it is easy with one of many plugins on the computer, it gets harder on devices such as iPad or PS3 and even more so on Chromecast with its hard-coded google DNS. Some people will also want a solution for the home router, covering all devices at once.&lt;/p&gt;
&lt;p&gt;The most common fix is to get a VPN. Usable from the computer, iPad, Chromecast or a sufficiently advanced router, a VPN routes your traffic through a server in the US. The main drawback is speed. Most VPN providers are over-subscribed and, in general, it will be hard to get Super HD streaming - at least with any stability and on more than one device. You will also want to separate your other browsing traffic from the VPN to avoid the speed loss, and avoid having all websites think you are from the US. All in all, a solution with drawbacks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Keep iPad/iPhone iOS keyboard up between input fields</title>
      <link>http://localhost:1313/keep-ipadiphone-ios-keyboard-up-between-input-fields/</link>
      <pubDate>Sun, 29 Dec 2013 00:47:18 +0000</pubDate>
       <guid isPermaLink="false">http://www.gundersen.net/?p=219</guid> 
      <description>&lt;p&gt;The iPad and iPhone has more than a few quirks web developers need to handle. One of them is being quite insistent on when to show and hide the on-screen keyboard. The default iPad behaviour, in all iOS versions, is to drop the keyboard between input fields, and to deny programmatically showing the keyboard on focus changes. It is only shown when the user taps an input field.&lt;/p&gt;
&lt;p&gt;While this is adequate for most situations, it can be really frustrating in cases of several fixed-width input fields in a row.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
